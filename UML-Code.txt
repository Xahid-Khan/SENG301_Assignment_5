//Strategy Method
@startuml
hide empty attributes

Class Game {
  Game(User, Guesser, Wordle)
  playGame()
}

abstract Class Guesser {
#wordle
#numGuesses
+{abstract}getGuess()
+getNumGuesses()
}

Game *- Guesser

Class RandomGuesser {
+RandomGuesser(wordle)
+getGuess()
}

Class ManualGuesser {
+ManualGuesser(wordle, scanner, printStream)
+getGuesses(): Stack<Guess>
+getGuess(): Guess
}

Class SmartGuesser {
+SmartGuesser(wordle)
+getGuess(): Guess
}

Guesser <|--- RandomGuesser

Guesser <|--- ManualGuesser

Guesser <|--- SmartGuesser
@enduml


//Proxy

@startuml
hide empty attributes
hide empty methods
Class App {}

hide DictionaryQuery attributes
interface DictionaryQuery{
+guessWord(String query)
}

Class Dictionary{
+Dictionary()
+guessWord(string)
}

Class DictionaryService{
-{static} LOGGER
-{static} SOLVER_URL
-objectMapper
+guessWord(string)
+offlineWords()
}

Dictionary -> DictionaryService: uses
App -> DictionaryQuery
DictionaryQuery <|.. Dictionary
DictionaryQuery <|.. DictionaryService
@enduml



// Command


@startuml

hide empty attributes

interface Command {
  {abstract}execute()
  {abstract}undoExecute()
}

Class UndoCommand {
  UndoCommand(ManualGuesser)
  execute()
  undoExecute()
}

Class Game {
  playGame()
}

Class SetCommand {
  executeCommand(Command, String)
}

Class ManualGuesser {
  getGuess()   : Guess
  undoAGuess() : void
  redoAGuess() : void
  getGuesses() : Stack<Guess>
}

Game -> ManualGuesser : uses
Game -> SetCommand : sets
Game ..> UndoCommand : creates
Command <|.. UndoCommand
SetCommand o- Command
UndoCommand --> ManualGuesser
@enduml


/// Tast 2 - UML


@startuml
hide empty fields
hide empty methods

Class User {
  userId: Long
  name: String
}

Class UserAccessor {
  getUserByName(String): User
  getUserById(Long): User
  persistUser(User): Long
  removeUserById(Long)
}

UserAccessor "1" -- "0..*" User : access >

Class GameRecord {
  gameRecordId: Long
  numGuesses: int
  word: String
}

Class GameRecordAccessor {
  getHighScores(): List<GameRecord>
  persistGameRecor(GameRecord): Long
  deleteGameRecordById(Long)
}

GameRecordAccessor "1" -- "0..*" GameRecord : access

Class Game{
  +Game(User, Guesser, Wordle)
  +playGame(): GameRecord
}

Class Wordle {
  Wordle(String)
  check(String) : boolean
  getWord() : String
}


User "1" -- "0..*" Game : plays >
GameRecord "1" - "1..*" Game : records >
Game "1" *- "1" Wordle : agains >
Game "1" *-- "1" Guesser : with >
Wordle "1" *-- "0..*" Guess : < for

abstract Class Guess {
  proposition: String
  {abstract} getProposition()
  {abstract} isCorrect()
}

Class GuessImpl {
  isCorrect(): boolean
  getProposition(): String
}

Guess <|-- GuessImpl

abstract Class Guesser{
  getGuess(): Guess
  getNumGuesses() : int
}

Class ManualGuesser {
  ManualGuesser(Wordle, Scanner, PrintStream)
  getGuess() : Guess
  getGuesses() : Stack<Guess>
}

Class RandomGuesser {
  RandomGuesser(Wordle)
  getGuess(): Guess
}

Class SmartGuesser {
  SmartGuesser(Wordle)
  getGuess(): Guess
}

Guesser <|---- ManualGuesser
Guesser <|-- SmartGuesser
Guesser <|-- RandomGuesser
Guesser "1" *- "0..*" Guess : creates >

Class ColourCoder {
  ColourCode(Wordle)
  getColourCodedString(String): String
}

ManualGuesser "1" *-- "1" ColourCoder : uses >
ManualGuesser "1" *-- "1" DictionaryQuery : uses >

interface DictionaryQuery {
  guessWord(String)
}

Class Knowledge {
  update(Guess, String)
  getKnownInPlace(): char[]
  getKnownOutOfPlace(): char[]
  getKnownNotInWord(): char[]
}

SmartGuesser "1" *-- "1" Knowledge


Class Dictionary {
  guessWord(String): DictionaryResponse
}

Class DictionaryService {
  guessWord(String): DictionaryResponse
  offlineWords(): DictionaryResponse
}

Class DictionaryResponse{
  words: List<String>
}


DictionaryQuery <|. Dictionary
DictionaryQuery <|.. DictionaryService
Dictionary "1" -- "1" DictionaryService
Dictionary "0..1" -- "0..*" Guesser : helps >
Dictionary "1" - "1..*" DictionaryResponse : builds >
DictionaryService "1" - "1..*" DictionaryResponse : builds >
@enduml